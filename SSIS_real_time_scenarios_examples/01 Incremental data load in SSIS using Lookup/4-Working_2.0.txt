--Incremental loading using SSIS and lookup

Refer provided emails.csv file.
if new records are added to this csv file or if any data is updated, data should be inserted or updated to backend table.

Refer: CreateTable file

create new package (Package8.dtsx>
in Contrl flow >
Step 1: add execute sql task (add sql from CreateTable file)
Step 2: add dataflow
         --add flat file source and point to emails.csv file (remember to change data type of  Id to 4-bute signed intenger)
	 --add lookup transformation
                  Options: default for caching
                           redirect rows to no match output
		  Connection : Use results of an SQL query
                               select Id from emails
		  columns: provide id to id mapping
Step 3: Add 2 OLE DB destinations 
        1. for no match: Point to Emails
	2. for match: Point to ZZ

Step 4: write update statement for handling updated records
UPDATE a  
      set a.[First_name] = b.[First_name],
          a.[last_name] = b.[last_name],
		  a.[Email] = b.[Email],
          a.[Gender] = b.[Gender]
 from dbo.emails as a inner join dbo.zz_email_updated as b
 on a.id = b.id
GO

--so after adding variable for updating auditlog table,it becomes as follows
declare @updated int
UPDATE a  
      set a.[First_name] = b.[First_name],
          a.[last_name] = b.[last_name],
		  a.[Email] = b.[Email],
          a.[Gender] = b.[Gender]
 from dbo.emails as a inner join dbo.zz_email_updated as b
 on a.id = b.id
set @updated = @@ROWCOUNT
insert into dbo.audit_log
select 'Package.dtsx', 'Emails',0, @updated, GETDATE()

Step 5: Add the above query to 'execute sql task'

Step 6: To handle insertedrecords, lets add new variable
RecordsInserted.

We also need to use a rowcount transformation for no match records.
within this, we can map to 'RecordsInserted' variable.

Stel 7: Also edit the update sql task.
declare @updated int
UPDATE a  
      set a.[First_name] = b.[First_name],
          a.[last_name] = b.[last_name],
		  a.[Email] = b.[Email],
          a.[Gender] = b.[Gender]
 from dbo.emails as a inner join dbo.zz_email_updated as b
 on a.id = b.id
set @updated = @@ROWCOUNT
insert into dbo.audit_log
select 'Package.dtsx', 'Emails',?,@updated, GETDATE()

in paramter mapping: select user::recordsinserted and paramter name: 0

1st run:
Run for first time: 1000 records will be pushed as non matching and sent towards no match..
select * from emails
select * from zz_email_updated
select * from audit_log order by id desc;

2nd run:
select count(*) from emails
select count(*) from zz_email_updated
select * from audit_log order by id desc;

Id	PackageName	TableName	RecordsInserted	RecordsUpdated	Dated
4	Package.dtsx	Emails		0		1000	2024-02-25 06:20:20.007
3	Package.dtsx	Emails		0		1000	2024-02-25 06:19:15.643
2	Package.dtsx	Emails		1000		0	2024-02-25 06:18:17.527

but when we update in flat file, we only want to update only records that were changed and not all.
We can add conditions such as if lastname or email changed, consider the record as updated.

--disconnect connection from lookup to match records.
--Edit lookup and query to :select id,email as dest_email,last_name as dest_last_name from emails
   & in columns, select dest_email and dest_last_name from lookup
--add conditional slit and add condition
  Updated Records : [last_name]!= [dest_last_name] ||  [email] != [dest_email]

--connect to OLE DB Destination.

Now run the package again, but after making change to some records..

















